[#ftl]
[#--macro for writing a type page--]
[#-- @ftlvariable name="type" type="org.codehaus.enunciate.contract.jaxb.TypeDefinition" --]
[#import "boilerplate.fmt" as libBoilerplate/]
[#macro writeXmlTypePage type]
  [#assign schema=schemaForNamespace(type)/]
  [#assign typeLabel=type.javaDoc["label"]!type.name!"Anonymous"/]
  [@libBoilerplate.writeStartBody label=typeLabel/]
  <div class="container">
    [@libBoilerplate.writeHeader]
    <ul class="xbreadcrumbs" id="breadcrumbs">
      <li><a href="Home.html" class="home">Home</a></li>
      <li>
        <a href="media-types.html">Media Types</a>
        <ul>
          <li><a href="media-types.html">Media Types</a></li>
          <li><a href="recipes.html">Recipes</a></li>
        </ul>
      </li>
      [#if schema.properties.mediaType??]
      <li>
        <a href="mt_${schema.properties.mediaType.id}_xml.html">${schema.properties.mediaType.name} XML</a>
        <ul>
          [#list mediaTypeDeclarations as mt]
            [#if mt.xmlMediaType??]
              <li><a href="${baseProjectUri(sch)}mt_${mt.id}_xml.html">${mt.name} XML</a></li>
            [/#if]
            [#if mt.jsonMediaType??]
              <li><a href="${baseProjectUri(sch)}mt_${mt.id}_json.html">${mt.name} JSON</a></li>
            [/#if]
          [/#list]
        </ul>
      </li>
      [/#if]
      <li class="current">
          <a href="#">${typeLabel}</a>
          <ul>
      [#assign typeList=schema.typeDefinitions/]
      [#if schema.properties.mediaType??]
        [#assign typeList=schema.properties.mediaType.dataTypes/]
      [/#if]
      [#list typeList as td]
            <li><a href="${schema.id}_${td.name}_xml.html">${td.javaDoc["label"]!td.name!"Anonymous"}</a></li>
      [/#list]
          </ul>
        </li>
      </ul>
    [/@libBoilerplate.writeHeader]
    <div id="main" class="column first last span-20">
      <h1>${typeLabel}</h1>

      <hr/>

      <table>
        <tr>
          <td align="right">Identifier:</td>
          <td>${type.namespace}${type.name}</td>
        </tr>
        [#if !type.baseObject]
        <tr>
          <td align="right">Extends:</td>
          <td><a href="${baseProjectUri(type.baseType)}${schemaForNamespace(type.baseType).id}_${type.baseType.name}_xml.html">${typeName(type.baseType, type.namespace)}</a></td>
        </tr>
        [/#if]
      </table>

      <h3>Description</h3>

      <p>${type.docValue!""}</p>

    [#if type.enum!false]
      <h3>Enumerated Values</h3>
      <table>
        <tr>
          <th align="center">value</th>
          <th align="center">description</th>
        </tr>
      [#assign enumValueMap=type.enumValues/]
      [#list type.enumConstants as constant]
        [#if enumValueMap[constant.simpleName]??]
        <tr>
          [#if type.QNameEnum!false]
          <td>${enumValueMap[constant.simpleName].namespaceURI}${enumValueMap[constant.simpleName].localPart}</td>
          [#else]
          <td>${enumValueMap[constant.simpleName]}</td>
          [/#if]
          <td>${constant.docComment!""}</td>
        </tr>
        [/#if]
      [/#list]
      </table>
    [#else]
      [#if type.value??]
        [#assign hasSchema=schemaForNamespace(type.value)??/]
        <h3>Value</h3>
        <table>
          <tr>
            <th align="center">type</th>
            <th align="center">description</th>
          </tr>
          <tr>
            <td>[#if hasSchema]<a href="${baseProjectUri(type.value)}${schemaForNamespace(type.value).id}_${type.value.baseType.qname.localPart}_xml.html">[/#if]${typeName(type.value, type.namespace)}[#if hasSchema]</a>[/#if]</td>
            <td>${type.value.docValue!""}</td>
          </tr>
        </table>
      [/#if]
      [#if type.attributes?size > 0 || type.hasAnyAttribute!false]

        <h3>Attributes</h3>
        <table>
          <tr>
            <th align="center">name</th>
            <th align="center">type</th>
            <th align="center">description</th>
          </tr>
        [#list type.attributes as attribute]
          [#assign hasSchema=schemaForNamespace(attribute)??/]
          <tr>
            <td>${attribute.name}</td>
            <td>[#if hasSchema]<a href="${baseProjectUri(attribute)}${schemaForNamespace(attribute).id}_${attribute.baseType.qname.localPart}_xml.html">[/#if]${typeName(attribute, type.namespace)}[#if hasSchema]</a>[/#if]</td>
            <td>${attribute.docValue!""}</td>
          </tr>
        [/#list]
        [#if type.hasAnyAttribute!false]
          <tr>
            <td>(custom)</td>
            <td>string</td>
            <td>A set of custom attributes.</td>
          </tr>
        [/#if]
        </table>
      [/#if]
      [#if type.elements?size > 0 || type.anyElement??]

        <h3>Elements</h3>
        <table>
          <tr>
            <th align="center">name</th>
            <th align="center">type</th>
            <th align="center">occurs</th>
            <th align="center">description</th>
          </tr>
        [#list type.elements as element]
          [#assign hasSchema=schemaForNamespace(element)??/]
          <tr>
            <td>${element.name}[#if element.wrapped!false] (wrapped in "${element.wrapperName}" element)[/#if]</td>
            <td>[#if hasSchema]<a href="${baseProjectUri(element)}${schemaForNamespace(element).id}_[#if element.ref??]${element.ref.localPart}[#else]${element.baseType.qname.localPart}[/#if]_xml.html">[/#if]${typeName(element, type.namespace)}[#if hasSchema]</a>[/#if]</td>
            <td>${element.minOccurs}..[#if "unbounded" = element.maxOccurs]*[#else]${element.maxOccurs}[/#if]</td>
            <td>${element.docValue!""}</td>
          </tr>
        [/#list]
        [#if type.anyElement??]
          <tr>
            <td>(custom)</td>
            <td>(custom)</td>
            <td>0..*</td>
            <td>${type.anyElement.docValue!""}</td>
          </tr>
        [/#if]
        </table>
      [/#if]

        <h3>Example</h3>
        <pre class="prettyprint lang-xml">
${generateExampleXml(type)?html}
        </pre>
    [/#if]

    <div class="clear" />
    [@libBoilerplate.writeFooter/]
  </div> <!--! end of #container -->

  [@libBoilerplate.writeEndBody/]
[/#macro]
[#macro writeJsonTypePage type]
  [#assign schema=schemaForNamespace(type)/]
  [#assign typeLabel=type.javaDoc["label"]!type.name!"Anonymous"/]
  [@libBoilerplate.writeStartBody label=typeLabel/]
  <div class="container">
    [@libBoilerplate.writeHeader]
    <ul class="xbreadcrumbs" id="breadcrumbs">
      <li><a href="Home.html" class="home">Home</a></li>
      <li>
        <a href="media-types.html">Media Types</a>
        <ul>
          <li><a href="media-types.html">Media Types</a></li>
          <li><a href="recipes.html">Recipes</a></li>
        </ul>
      </li>
      [#if schema.properties.mediaType??]
      <li>
        <a href="mt_${schema.properties.mediaType.id}_xml.html">${schema.properties.mediaType.name} XML</a>
        <ul>
          [#list mediaTypeDeclarations as mt]
            [#if mt.xmlMediaType??]
              <li><a href="${baseProjectUri(sch)}mt_${mt.id}_xml.html">${mt.name} XML</a></li>
            [/#if]
            [#if mt.jsonMediaType??]
              <li><a href="${baseProjectUri(sch)}mt_${mt.id}_json.html">${mt.name} JSON</a></li>
            [/#if]
          [/#list]
        </ul>
      </li>
      [/#if]
      <li class="current">
          <a href="#">${typeLabel}</a>
          <ul>
      [#assign typeList=schema.typeDefinitions/]
      [#if schema.properties.mediaType??]
        [#assign typeList=schema.properties.mediaType.dataTypes/]
      [/#if]
      [#list typeList as td]
            <li><a href="${schema.id}_${td.name}_json.html">${td.javaDoc["label"]!td.name!"Anonymous"}</a></li>
      [/#list]
          </ul>
        </li>
      </ul>
    [/@libBoilerplate.writeHeader]
    <div id="main" class="column first last span-20">
      <h1>${typeLabel}</h1>

      <hr/>

      <table>
        <tr>
          <td align="right">Identifier:</td>
          <td>${type.namespace}${type.name}</td>
        </tr>
        [#if !type.baseObject]
        <tr>
          <td align="right">Extends:</td>
          <td><a href="${baseProjectUri(type.baseType)}${schemaForNamespace(type.baseType).id}_${type.baseType.name}_json.html">${typeName(type.baseType, type.namespace)}</a></td>
        </tr>
        [/#if]
      </table>

      <h3>Description</h3>

      <p>${type.docValue!""}</p>

    [#if type.enum!false]
      <h3>Enumerated Values</h3>
      <table>
        <tr>
          <th align="center">value</th>
          <th align="center">description</th>
        </tr>
      [#assign enumValueMap=type.enumValues/]
      [#list type.enumConstants as constant]
        [#if enumValueMap[constant.simpleName]??]
        <tr>
          [#if type.QNameEnum!false]
          <td>${enumValueMap[constant.simpleName].namespaceURI}${enumValueMap[constant.simpleName].localPart}</td>
          [#else]
          <td>${enumValueMap[constant.simpleName]}</td>
          [/#if]
          <td>${constant.docComment!""}</td>
        </tr>
        [/#if]
      [/#list]
      </table>
    [#else]
        <h3>Properties</h3>
        <table>
          <tr>
            <th align="center">name</th>
            <th align="center">type</th>
            <th align="center">description</th>
          </tr>
        [#list type.attributes as attribute]
          [#assign hasSchema=schemaForNamespace(attribute)??/]
          <tr>
            <td>${attribute.jsonMemberName}</td>
            <td>[#if hasSchema]<a href="${baseProjectUri(attribute)}${schemaForNamespace(attribute).id}_${attribute.baseType.qname.localPart}_json.html">[/#if]${typeName(attribute, type.namespace)}[#if hasSchema]</a>[/#if]</td>
            <td>${attribute.docValue!""}</td>
          </tr>
        [/#list]
        [#list type.elements as element]
          [#assign hasSchema=schemaForNamespace(element)??/]
          <tr>
            <td>${element.jsonMemberName}</td>
            <td>[#if element.collectionType!false]array of [/#if][#if hasSchema]<a href="${baseProjectUri(element)}${schemaForNamespace(element).id}_[#if element.ref??]${element.ref.localPart}[#else]${element.baseType.qname.localPart}[/#if]_json.html">[/#if]${typeName(element, type.namespace)}[#if hasSchema]</a>[/#if]</td>
            <td>${element.docValue!""}</td>
          </tr>
        [/#list]
        [#if type.value??]
          [#assign hasSchema=schemaForNamespace(type.value)??/]
          <tr>
            <td>${type.value.jsonMemberName}</td>
            <td>[#if hasSchema]<a href="${baseProjectUri(type.value)}${schemaForNamespace(type.value).id}_${type.value.baseType.qname.localPart}_json.html">[/#if]${typeName(type.value, type.namespace)}[#if hasSchema]</a>[/#if]</td>
            <td>${type.value.docValue!""}</td>
          </tr>
        [/#if]
        </table>

        <h3>Example</h3>
        <pre class="prettyprint lang-js">
${generateExampleJson(type)}
        </pre>
    [/#if]

    <div class="clear" />
    [@libBoilerplate.writeFooter/]
  </div> <!--! end of #container -->

  [@libBoilerplate.writeEndBody/]
[/#macro]
