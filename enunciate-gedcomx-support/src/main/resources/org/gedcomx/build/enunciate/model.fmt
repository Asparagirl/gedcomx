[#ftl]
[#--macro for writing a namespace page--]
[#-- @ftlvariable name="schema" type="org.codehaus.enunciate.config.SchemaInfo" --]
[#import "boilerplate.fmt" as libBoilerplate/]
[#macro writeModelPage schema]
  [@libBoilerplate.writeStartBody label=schema.properties.label!("\"" + schema.id + "\" Model")/]
  <div class="container">
    [@libBoilerplate.writeHeader]
      <ul class="xbreadcrumbs" id="breadcrumbs">
        <li><a href="Home.html" class="home">Home</a></li>
        <li>
          <a href="models.html">Models</a>
          <ul>
            <li><a href="models.html">Models</a></li>
      [#if resourceDefinitions?size > 0]
            <li><a href="resource_definitions.html">Resource Definitions</a></li>
      [/#if]
            <li><a href="recipes.html">Recipes</a></li>
          </ul>
        </li>
        <li class="current">
          <a href="${schema.id}.html">${schema.properties.label!("\"" + schema.id + "\" Model")}</a>
          <ul>
      [@forEachSchema var="sch"]
        [#if (sch.typeDefinitions?size > 0) || (sch.globalElements?size > 0)]
            <li><a href="${baseProjectUri(sch)}${sch.id}.html">${sch.properties.label!("\"" + sch.id + "\" Model")}</a></li>
        [/#if]
      [/@forEachSchema]
          </ul>
        </li>
      </ul>
    [/@libBoilerplate.writeHeader]
    <div id="main" class="column first last span-20">
      <h1>${schema.properties.label!("\"" + schema.id + "\" Model")}</h1>

      <hr/>

      <table>
        <tr>
          <td align="right">Model ID:</td>
          <td>${schema.id}</td>
        </tr>
        <tr>
          <td align="right">Namespace URI:</td>
          <td>${schema.namespace}</td>
        </tr>
        [#if schema.properties.version??]
        <tr>
          <td align="right">Version:</td>
          <td>${schema.properties.version}</td>
        </tr>
        [/#if]
        <tr>
          <td align="right">XML Schema:</td>
          <td><a href="${schema.properties.filename!"#"}">${schema.properties.filename!"n/a"}</a></td>
        </tr>
        [#if schema.properties.rdfSchemaLocation??]
        <tr>
          <td align="right">RDF Schema:</td>
          <td><a href="${schema.properties.rdfSchemaLocation}">${schema.properties.rdfSchemaLocation}</a></td>
        </tr>
        [/#if]
        [#if schema.properties.xmlMediaType??]
        <tr>
          <td align="right">XML Media Type:</td>
          <td>${schema.properties.xmlMediaType}</td>
        </tr>
        [/#if]
        [#if schema.properties.jsonMediaType??]
        <tr>
          <td align="right">JSON Media Type:</td>
          <td>${schema.properties.jsonMediaType}</td>
        </tr>
        [/#if]
      </table>

      <p>${schema.properties.description!""}</p>

      [#if schema.globalElements?size > 0]
      <h3>Elements</h3>

      <ul>
        [#list schema.globalElements as element]
        <li><a href="${schema.id}_el_${element.name}.html">${element.name}</a></li>
        [/#list]
      </ul>

      [/#if]
      <h3>Data Types</h3>

      <ul>
        [#list schema.typeDefinitions as type]
        <li><a href="${schema.id}_${type.name}.html">${type.name}</a></li>
        [/#list]
      </ul>
      [#if schema.localElementDeclarations?size > 0]
      <h3>Subelements</h3>
      
      <p>The ${schema.properties.label!("\"" + schema.id + "\" Model")} defines the following subelements that may be used as extension elements (in addition to
        the root elements) for convenience in supplying additional information for specific resources.</p>
      
      <table>
        <tr>
          <th>xml id</th>
          <th>json id</th>
          <th>type</th>
          <th>description</th>
        </tr>
        [#list schema.localElementDeclarations as element]
        <tr>
          <td>${element.namespace}${element.name}</td>
          <td>${jsonExtensionElementName(element)}</td>
          [#assign elementXmlType=element.elementXmlType/]
          <td><a href="${schemaForNamespace(elementXmlType).id}_${elementXmlType.name}.html">${elementXmlType.namespace}${elementXmlType.name}</a></td>
          <td>${element.docValue!""}</td>
        </tr>
        [/#list]
      </table>

      [/#if]

      <div class="clear" />
    </div>
    [@libBoilerplate.writeFooter/]
  </div> <!--! end of #container -->

  [@libBoilerplate.writeEndBody/]
[/#macro]